# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Admin {
  Reply(cursor: ReplyWhereUniqueInput, distinct: [ReplyScalarFieldEnum!], orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): [Reply!]!
  _count: AdminCount
  email: String!
  id: String!
  name: String!
  password: String!
}

type AdminCount {
  Reply: Int!
}

type AdminCountAggregate {
  _all: Int!
  email: Int!
  id: Int!
  name: Int!
  password: Int!
}

input AdminCountOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input AdminCreateInput {
  Reply: ReplyCreateNestedManyWithoutSenderInput
  email: String!
  id: String
  name: String!
  password: String!
}

input AdminCreateNestedOneWithoutReplyInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutReplyInput
  create: AdminCreateWithoutReplyInput
}

input AdminCreateOrConnectWithoutReplyInput {
  create: AdminCreateWithoutReplyInput!
  where: AdminWhereUniqueInput!
}

input AdminCreateWithoutReplyInput {
  email: String!
  id: String
  name: String!
  password: String!
}

type AdminGroupBy {
  _count: AdminCountAggregate
  _max: AdminMaxAggregate
  _min: AdminMinAggregate
  email: String!
  id: String!
  name: String!
  password: String!
}

type AdminMaxAggregate {
  email: String
  id: String
  name: String
  password: String
}

input AdminMaxOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

type AdminMinAggregate {
  email: String
  id: String
  name: String
  password: String
}

input AdminMinOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input AdminOrderByWithAggregationInput {
  _count: AdminCountOrderByAggregateInput
  _max: AdminMaxOrderByAggregateInput
  _min: AdminMinOrderByAggregateInput
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input AdminOrderByWithRelationInput {
  Reply: ReplyOrderByRelationAggregateInput
  email: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
}

input AdminRelationFilter {
  is: AdminWhereInput
  isNot: AdminWhereInput
}

enum AdminScalarFieldEnum {
  email
  id
  name
  password
}

input AdminScalarWhereWithAggregatesInput {
  AND: [AdminScalarWhereWithAggregatesInput!]
  NOT: [AdminScalarWhereWithAggregatesInput!]
  OR: [AdminScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
}

input AdminUpdateInput {
  Reply: ReplyUpdateManyWithoutSenderInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input AdminUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input AdminUpdateOneRequiredWithoutReplyInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutReplyInput
  create: AdminCreateWithoutReplyInput
  update: AdminUpdateWithoutReplyInput
  upsert: AdminUpsertWithoutReplyInput
}

input AdminUpdateWithoutReplyInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
}

input AdminUpsertWithoutReplyInput {
  create: AdminCreateWithoutReplyInput!
  update: AdminUpdateWithoutReplyInput!
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  Reply: ReplyListRelationFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  password: StringFilter
}

input AdminWhereUniqueInput {
  id: String
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAdmin {
  _count: AdminCountAggregate
  _max: AdminMaxAggregate
  _min: AdminMinAggregate
}

type AggregateChat {
  _avg: ChatAvgAggregate
  _count: ChatCountAggregate
  _max: ChatMaxAggregate
  _min: ChatMinAggregate
  _sum: ChatSumAggregate
}

type AggregateReply {
  _avg: ReplyAvgAggregate
  _count: ReplyCountAggregate
  _max: ReplyMaxAggregate
  _min: ReplyMinAggregate
  _sum: ReplySumAggregate
}

type AggregateRoom {
  _avg: RoomAvgAggregate
  _count: RoomCountAggregate
  _max: RoomMaxAggregate
  _min: RoomMinAggregate
  _sum: RoomSumAggregate
}

type AggregateVisitor {
  _count: VisitorCountAggregate
  _max: VisitorMaxAggregate
  _min: VisitorMinAggregate
}

type Chat {
  Room: Room
  created_at: DateTime!
  id: Int!
  media: String
  roomId: Int
  sender: Visitor!
  text: String
  visitorId: String!
}

type ChatAvgAggregate {
  id: Float
  roomId: Float
}

input ChatAvgOrderByAggregateInput {
  id: SortOrder
  roomId: SortOrder
}

type ChatCountAggregate {
  _all: Int!
  created_at: Int!
  id: Int!
  media: Int!
  roomId: Int!
  text: Int!
  visitorId: Int!
}

input ChatCountOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  media: SortOrder
  roomId: SortOrder
  text: SortOrder
  visitorId: SortOrder
}

input ChatCreateInput {
  Room: RoomCreateNestedOneWithoutChatInput
  created_at: DateTime!
  media: String
  sender: VisitorCreateNestedOneWithoutChatInput!
  text: String
}

input ChatCreateNestedManyWithoutRoomInput {
  connect: [ChatWhereUniqueInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutRoomInput!]
  create: [ChatCreateWithoutRoomInput!]
}

input ChatCreateNestedManyWithoutSenderInput {
  connect: [ChatWhereUniqueInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutSenderInput!]
  create: [ChatCreateWithoutSenderInput!]
}

input ChatCreateOrConnectWithoutRoomInput {
  create: ChatCreateWithoutRoomInput!
  where: ChatWhereUniqueInput!
}

input ChatCreateOrConnectWithoutSenderInput {
  create: ChatCreateWithoutSenderInput!
  where: ChatWhereUniqueInput!
}

input ChatCreateWithoutRoomInput {
  created_at: DateTime!
  media: String
  sender: VisitorCreateNestedOneWithoutChatInput!
  text: String
}

input ChatCreateWithoutSenderInput {
  Room: RoomCreateNestedOneWithoutChatInput
  created_at: DateTime!
  media: String
  text: String
}

type ChatGroupBy {
  _avg: ChatAvgAggregate
  _count: ChatCountAggregate
  _max: ChatMaxAggregate
  _min: ChatMinAggregate
  _sum: ChatSumAggregate
  created_at: DateTime!
  id: Int!
  media: String
  roomId: Int
  text: String
  visitorId: String!
}

input ChatListRelationFilter {
  every: ChatWhereInput
  none: ChatWhereInput
  some: ChatWhereInput
}

type ChatMaxAggregate {
  created_at: DateTime
  id: Int
  media: String
  roomId: Int
  text: String
  visitorId: String
}

input ChatMaxOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  media: SortOrder
  roomId: SortOrder
  text: SortOrder
  visitorId: SortOrder
}

type ChatMinAggregate {
  created_at: DateTime
  id: Int
  media: String
  roomId: Int
  text: String
  visitorId: String
}

input ChatMinOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  media: SortOrder
  roomId: SortOrder
  text: SortOrder
  visitorId: SortOrder
}

input ChatOrderByRelationAggregateInput {
  _count: SortOrder
}

input ChatOrderByWithAggregationInput {
  _avg: ChatAvgOrderByAggregateInput
  _count: ChatCountOrderByAggregateInput
  _max: ChatMaxOrderByAggregateInput
  _min: ChatMinOrderByAggregateInput
  _sum: ChatSumOrderByAggregateInput
  created_at: SortOrder
  id: SortOrder
  media: SortOrder
  roomId: SortOrder
  text: SortOrder
  visitorId: SortOrder
}

input ChatOrderByWithRelationInput {
  Room: RoomOrderByWithRelationInput
  created_at: SortOrder
  id: SortOrder
  media: SortOrder
  roomId: SortOrder
  sender: VisitorOrderByWithRelationInput
  text: SortOrder
  visitorId: SortOrder
}

enum ChatScalarFieldEnum {
  created_at
  id
  media
  roomId
  text
  visitorId
}

input ChatScalarWhereInput {
  AND: [ChatScalarWhereInput!]
  NOT: [ChatScalarWhereInput!]
  OR: [ChatScalarWhereInput!]
  created_at: DateTimeFilter
  id: IntFilter
  media: StringNullableFilter
  roomId: IntNullableFilter
  text: StringNullableFilter
  visitorId: StringFilter
}

input ChatScalarWhereWithAggregatesInput {
  AND: [ChatScalarWhereWithAggregatesInput!]
  NOT: [ChatScalarWhereWithAggregatesInput!]
  OR: [ChatScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  media: StringNullableWithAggregatesFilter
  roomId: IntNullableWithAggregatesFilter
  text: StringNullableWithAggregatesFilter
  visitorId: StringWithAggregatesFilter
}

type ChatSumAggregate {
  id: Int
  roomId: Int
}

input ChatSumOrderByAggregateInput {
  id: SortOrder
  roomId: SortOrder
}

input ChatUpdateInput {
  Room: RoomUpdateOneWithoutChatInput
  created_at: DateTimeFieldUpdateOperationsInput
  media: NullableStringFieldUpdateOperationsInput
  sender: VisitorUpdateOneRequiredWithoutChatInput
  text: NullableStringFieldUpdateOperationsInput
}

input ChatUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  media: NullableStringFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
}

input ChatUpdateManyWithWhereWithoutRoomInput {
  data: ChatUpdateManyMutationInput!
  where: ChatScalarWhereInput!
}

input ChatUpdateManyWithWhereWithoutSenderInput {
  data: ChatUpdateManyMutationInput!
  where: ChatScalarWhereInput!
}

input ChatUpdateManyWithoutRoomInput {
  connect: [ChatWhereUniqueInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutRoomInput!]
  create: [ChatCreateWithoutRoomInput!]
  delete: [ChatWhereUniqueInput!]
  deleteMany: [ChatScalarWhereInput!]
  disconnect: [ChatWhereUniqueInput!]
  set: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueWithoutRoomInput!]
  updateMany: [ChatUpdateManyWithWhereWithoutRoomInput!]
  upsert: [ChatUpsertWithWhereUniqueWithoutRoomInput!]
}

input ChatUpdateManyWithoutSenderInput {
  connect: [ChatWhereUniqueInput!]
  connectOrCreate: [ChatCreateOrConnectWithoutSenderInput!]
  create: [ChatCreateWithoutSenderInput!]
  delete: [ChatWhereUniqueInput!]
  deleteMany: [ChatScalarWhereInput!]
  disconnect: [ChatWhereUniqueInput!]
  set: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueWithoutSenderInput!]
  updateMany: [ChatUpdateManyWithWhereWithoutSenderInput!]
  upsert: [ChatUpsertWithWhereUniqueWithoutSenderInput!]
}

input ChatUpdateWithWhereUniqueWithoutRoomInput {
  data: ChatUpdateWithoutRoomInput!
  where: ChatWhereUniqueInput!
}

input ChatUpdateWithWhereUniqueWithoutSenderInput {
  data: ChatUpdateWithoutSenderInput!
  where: ChatWhereUniqueInput!
}

input ChatUpdateWithoutRoomInput {
  created_at: DateTimeFieldUpdateOperationsInput
  media: NullableStringFieldUpdateOperationsInput
  sender: VisitorUpdateOneRequiredWithoutChatInput
  text: NullableStringFieldUpdateOperationsInput
}

input ChatUpdateWithoutSenderInput {
  Room: RoomUpdateOneWithoutChatInput
  created_at: DateTimeFieldUpdateOperationsInput
  media: NullableStringFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
}

input ChatUpsertWithWhereUniqueWithoutRoomInput {
  create: ChatCreateWithoutRoomInput!
  update: ChatUpdateWithoutRoomInput!
  where: ChatWhereUniqueInput!
}

input ChatUpsertWithWhereUniqueWithoutSenderInput {
  create: ChatCreateWithoutSenderInput!
  update: ChatUpdateWithoutSenderInput!
  where: ChatWhereUniqueInput!
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  NOT: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  Room: RoomRelationFilter
  created_at: DateTimeFilter
  id: IntFilter
  media: StringNullableFilter
  roomId: IntNullableFilter
  sender: VisitorRelationFilter
  text: StringNullableFilter
  visitorId: StringFilter
}

input ChatWhereUniqueInput {
  id: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin!
  createChat(data: ChatCreateInput!): Chat!
  createReply(data: ReplyCreateInput!): Reply!
  createRoom(data: RoomCreateInput!): Room!
  createVisitor(data: VisitorCreateInput!): Visitor!
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteChat(where: ChatWhereUniqueInput!): Chat
  deleteManyAdmin(where: AdminWhereInput): AffectedRowsOutput!
  deleteManyChat(where: ChatWhereInput): AffectedRowsOutput!
  deleteManyReply(where: ReplyWhereInput): AffectedRowsOutput!
  deleteManyRoom(where: RoomWhereInput): AffectedRowsOutput!
  deleteManyVisitor(where: VisitorWhereInput): AffectedRowsOutput!
  deleteReply(where: ReplyWhereUniqueInput!): Reply
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteVisitor(where: VisitorWhereUniqueInput!): Visitor
  updateAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  updateManyAdmin(data: AdminUpdateManyMutationInput!, where: AdminWhereInput): AffectedRowsOutput!
  updateManyChat(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): AffectedRowsOutput!
  updateManyReply(data: ReplyUpdateManyMutationInput!, where: ReplyWhereInput): AffectedRowsOutput!
  updateManyRoom(data: RoomUpdateManyMutationInput!, where: RoomWhereInput): AffectedRowsOutput!
  updateManyVisitor(data: VisitorUpdateManyMutationInput!, where: VisitorWhereInput): AffectedRowsOutput!
  updateReply(data: ReplyUpdateInput!, where: ReplyWhereUniqueInput!): Reply
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  updateVisitor(data: VisitorUpdateInput!, where: VisitorWhereUniqueInput!): Visitor
  upsertAdmin(create: AdminCreateInput!, update: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin!
  upsertChat(create: ChatCreateInput!, update: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat!
  upsertReply(create: ReplyCreateInput!, update: ReplyUpdateInput!, where: ReplyWhereUniqueInput!): Reply!
  upsertRoom(create: RoomCreateInput!, update: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room!
  upsertVisitor(create: VisitorCreateInput!, update: VisitorUpdateInput!, where: VisitorWhereUniqueInput!): Visitor!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Query {
  admin(where: AdminWhereUniqueInput!): Admin
  admins(cursor: AdminWhereUniqueInput, distinct: [AdminScalarFieldEnum!], orderBy: [AdminOrderByWithRelationInput!], skip: Int, take: Int, where: AdminWhereInput): [Admin!]!
  aggregateAdmin(cursor: AdminWhereUniqueInput, orderBy: [AdminOrderByWithRelationInput!], skip: Int, take: Int, where: AdminWhereInput): AggregateAdmin!
  aggregateChat(cursor: ChatWhereUniqueInput, orderBy: [ChatOrderByWithRelationInput!], skip: Int, take: Int, where: ChatWhereInput): AggregateChat!
  aggregateReply(cursor: ReplyWhereUniqueInput, orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): AggregateReply!
  aggregateRoom(cursor: RoomWhereUniqueInput, orderBy: [RoomOrderByWithRelationInput!], skip: Int, take: Int, where: RoomWhereInput): AggregateRoom!
  aggregateVisitor(cursor: VisitorWhereUniqueInput, orderBy: [VisitorOrderByWithRelationInput!], skip: Int, take: Int, where: VisitorWhereInput): AggregateVisitor!
  chat(where: ChatWhereUniqueInput!): Chat
  chats(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum!], orderBy: [ChatOrderByWithRelationInput!], skip: Int, take: Int, where: ChatWhereInput): [Chat!]!
  findFirstAdmin(cursor: AdminWhereUniqueInput, distinct: [AdminScalarFieldEnum!], orderBy: [AdminOrderByWithRelationInput!], skip: Int, take: Int, where: AdminWhereInput): Admin
  findFirstChat(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum!], orderBy: [ChatOrderByWithRelationInput!], skip: Int, take: Int, where: ChatWhereInput): Chat
  findFirstReply(cursor: ReplyWhereUniqueInput, distinct: [ReplyScalarFieldEnum!], orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): Reply
  findFirstRoom(cursor: RoomWhereUniqueInput, distinct: [RoomScalarFieldEnum!], orderBy: [RoomOrderByWithRelationInput!], skip: Int, take: Int, where: RoomWhereInput): Room
  findFirstVisitor(cursor: VisitorWhereUniqueInput, distinct: [VisitorScalarFieldEnum!], orderBy: [VisitorOrderByWithRelationInput!], skip: Int, take: Int, where: VisitorWhereInput): Visitor
  groupByAdmin(by: [AdminScalarFieldEnum!]!, having: AdminScalarWhereWithAggregatesInput, orderBy: [AdminOrderByWithAggregationInput!], skip: Int, take: Int, where: AdminWhereInput): [AdminGroupBy!]!
  groupByChat(by: [ChatScalarFieldEnum!]!, having: ChatScalarWhereWithAggregatesInput, orderBy: [ChatOrderByWithAggregationInput!], skip: Int, take: Int, where: ChatWhereInput): [ChatGroupBy!]!
  groupByReply(by: [ReplyScalarFieldEnum!]!, having: ReplyScalarWhereWithAggregatesInput, orderBy: [ReplyOrderByWithAggregationInput!], skip: Int, take: Int, where: ReplyWhereInput): [ReplyGroupBy!]!
  groupByRoom(by: [RoomScalarFieldEnum!]!, having: RoomScalarWhereWithAggregatesInput, orderBy: [RoomOrderByWithAggregationInput!], skip: Int, take: Int, where: RoomWhereInput): [RoomGroupBy!]!
  groupByVisitor(by: [VisitorScalarFieldEnum!]!, having: VisitorScalarWhereWithAggregatesInput, orderBy: [VisitorOrderByWithAggregationInput!], skip: Int, take: Int, where: VisitorWhereInput): [VisitorGroupBy!]!
  replies(cursor: ReplyWhereUniqueInput, distinct: [ReplyScalarFieldEnum!], orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): [Reply!]!
  reply(where: ReplyWhereUniqueInput!): Reply
  room(where: RoomWhereUniqueInput!): Room
  rooms(cursor: RoomWhereUniqueInput, distinct: [RoomScalarFieldEnum!], orderBy: [RoomOrderByWithRelationInput!], skip: Int, take: Int, where: RoomWhereInput): [Room!]!
  visitor(where: VisitorWhereUniqueInput!): Visitor
  visitors(cursor: VisitorWhereUniqueInput, distinct: [VisitorScalarFieldEnum!], orderBy: [VisitorOrderByWithRelationInput!], skip: Int, take: Int, where: VisitorWhereInput): [Visitor!]!
}

type Reply {
  Room: Room
  adminId: String!
  created_at: DateTime!
  id: Int!
  media: String
  roomId: Int
  sender: Admin!
  text: String
}

type ReplyAvgAggregate {
  id: Float
  roomId: Float
}

input ReplyAvgOrderByAggregateInput {
  id: SortOrder
  roomId: SortOrder
}

type ReplyCountAggregate {
  _all: Int!
  adminId: Int!
  created_at: Int!
  id: Int!
  media: Int!
  roomId: Int!
  text: Int!
}

input ReplyCountOrderByAggregateInput {
  adminId: SortOrder
  created_at: SortOrder
  id: SortOrder
  media: SortOrder
  roomId: SortOrder
  text: SortOrder
}

input ReplyCreateInput {
  Room: RoomCreateNestedOneWithoutReplyInput
  created_at: DateTime!
  media: String
  sender: AdminCreateNestedOneWithoutReplyInput!
  text: String
}

input ReplyCreateNestedManyWithoutRoomInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutRoomInput!]
  create: [ReplyCreateWithoutRoomInput!]
}

input ReplyCreateNestedManyWithoutSenderInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutSenderInput!]
  create: [ReplyCreateWithoutSenderInput!]
}

input ReplyCreateOrConnectWithoutRoomInput {
  create: ReplyCreateWithoutRoomInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateOrConnectWithoutSenderInput {
  create: ReplyCreateWithoutSenderInput!
  where: ReplyWhereUniqueInput!
}

input ReplyCreateWithoutRoomInput {
  created_at: DateTime!
  media: String
  sender: AdminCreateNestedOneWithoutReplyInput!
  text: String
}

input ReplyCreateWithoutSenderInput {
  Room: RoomCreateNestedOneWithoutReplyInput
  created_at: DateTime!
  media: String
  text: String
}

type ReplyGroupBy {
  _avg: ReplyAvgAggregate
  _count: ReplyCountAggregate
  _max: ReplyMaxAggregate
  _min: ReplyMinAggregate
  _sum: ReplySumAggregate
  adminId: String!
  created_at: DateTime!
  id: Int!
  media: String
  roomId: Int
  text: String
}

input ReplyListRelationFilter {
  every: ReplyWhereInput
  none: ReplyWhereInput
  some: ReplyWhereInput
}

type ReplyMaxAggregate {
  adminId: String
  created_at: DateTime
  id: Int
  media: String
  roomId: Int
  text: String
}

input ReplyMaxOrderByAggregateInput {
  adminId: SortOrder
  created_at: SortOrder
  id: SortOrder
  media: SortOrder
  roomId: SortOrder
  text: SortOrder
}

type ReplyMinAggregate {
  adminId: String
  created_at: DateTime
  id: Int
  media: String
  roomId: Int
  text: String
}

input ReplyMinOrderByAggregateInput {
  adminId: SortOrder
  created_at: SortOrder
  id: SortOrder
  media: SortOrder
  roomId: SortOrder
  text: SortOrder
}

input ReplyOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReplyOrderByWithAggregationInput {
  _avg: ReplyAvgOrderByAggregateInput
  _count: ReplyCountOrderByAggregateInput
  _max: ReplyMaxOrderByAggregateInput
  _min: ReplyMinOrderByAggregateInput
  _sum: ReplySumOrderByAggregateInput
  adminId: SortOrder
  created_at: SortOrder
  id: SortOrder
  media: SortOrder
  roomId: SortOrder
  text: SortOrder
}

input ReplyOrderByWithRelationInput {
  Room: RoomOrderByWithRelationInput
  adminId: SortOrder
  created_at: SortOrder
  id: SortOrder
  media: SortOrder
  roomId: SortOrder
  sender: AdminOrderByWithRelationInput
  text: SortOrder
}

enum ReplyScalarFieldEnum {
  adminId
  created_at
  id
  media
  roomId
  text
}

input ReplyScalarWhereInput {
  AND: [ReplyScalarWhereInput!]
  NOT: [ReplyScalarWhereInput!]
  OR: [ReplyScalarWhereInput!]
  adminId: StringFilter
  created_at: DateTimeFilter
  id: IntFilter
  media: StringNullableFilter
  roomId: IntNullableFilter
  text: StringNullableFilter
}

input ReplyScalarWhereWithAggregatesInput {
  AND: [ReplyScalarWhereWithAggregatesInput!]
  NOT: [ReplyScalarWhereWithAggregatesInput!]
  OR: [ReplyScalarWhereWithAggregatesInput!]
  adminId: StringWithAggregatesFilter
  created_at: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  media: StringNullableWithAggregatesFilter
  roomId: IntNullableWithAggregatesFilter
  text: StringNullableWithAggregatesFilter
}

type ReplySumAggregate {
  id: Int
  roomId: Int
}

input ReplySumOrderByAggregateInput {
  id: SortOrder
  roomId: SortOrder
}

input ReplyUpdateInput {
  Room: RoomUpdateOneWithoutReplyInput
  created_at: DateTimeFieldUpdateOperationsInput
  media: NullableStringFieldUpdateOperationsInput
  sender: AdminUpdateOneRequiredWithoutReplyInput
  text: NullableStringFieldUpdateOperationsInput
}

input ReplyUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  media: NullableStringFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
}

input ReplyUpdateManyWithWhereWithoutRoomInput {
  data: ReplyUpdateManyMutationInput!
  where: ReplyScalarWhereInput!
}

input ReplyUpdateManyWithWhereWithoutSenderInput {
  data: ReplyUpdateManyMutationInput!
  where: ReplyScalarWhereInput!
}

input ReplyUpdateManyWithoutRoomInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutRoomInput!]
  create: [ReplyCreateWithoutRoomInput!]
  delete: [ReplyWhereUniqueInput!]
  deleteMany: [ReplyScalarWhereInput!]
  disconnect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutRoomInput!]
  updateMany: [ReplyUpdateManyWithWhereWithoutRoomInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutRoomInput!]
}

input ReplyUpdateManyWithoutSenderInput {
  connect: [ReplyWhereUniqueInput!]
  connectOrCreate: [ReplyCreateOrConnectWithoutSenderInput!]
  create: [ReplyCreateWithoutSenderInput!]
  delete: [ReplyWhereUniqueInput!]
  deleteMany: [ReplyScalarWhereInput!]
  disconnect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  update: [ReplyUpdateWithWhereUniqueWithoutSenderInput!]
  updateMany: [ReplyUpdateManyWithWhereWithoutSenderInput!]
  upsert: [ReplyUpsertWithWhereUniqueWithoutSenderInput!]
}

input ReplyUpdateWithWhereUniqueWithoutRoomInput {
  data: ReplyUpdateWithoutRoomInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpdateWithWhereUniqueWithoutSenderInput {
  data: ReplyUpdateWithoutSenderInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpdateWithoutRoomInput {
  created_at: DateTimeFieldUpdateOperationsInput
  media: NullableStringFieldUpdateOperationsInput
  sender: AdminUpdateOneRequiredWithoutReplyInput
  text: NullableStringFieldUpdateOperationsInput
}

input ReplyUpdateWithoutSenderInput {
  Room: RoomUpdateOneWithoutReplyInput
  created_at: DateTimeFieldUpdateOperationsInput
  media: NullableStringFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
}

input ReplyUpsertWithWhereUniqueWithoutRoomInput {
  create: ReplyCreateWithoutRoomInput!
  update: ReplyUpdateWithoutRoomInput!
  where: ReplyWhereUniqueInput!
}

input ReplyUpsertWithWhereUniqueWithoutSenderInput {
  create: ReplyCreateWithoutSenderInput!
  update: ReplyUpdateWithoutSenderInput!
  where: ReplyWhereUniqueInput!
}

input ReplyWhereInput {
  AND: [ReplyWhereInput!]
  NOT: [ReplyWhereInput!]
  OR: [ReplyWhereInput!]
  Room: RoomRelationFilter
  adminId: StringFilter
  created_at: DateTimeFilter
  id: IntFilter
  media: StringNullableFilter
  roomId: IntNullableFilter
  sender: AdminRelationFilter
  text: StringNullableFilter
}

input ReplyWhereUniqueInput {
  id: Int
}

type Room {
  _count: RoomCount
  chat(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum!], orderBy: [ChatOrderByWithRelationInput!], skip: Int, take: Int, where: ChatWhereInput): [Chat!]!
  created_at: DateTime!
  id: Int!
  reply(cursor: ReplyWhereUniqueInput, distinct: [ReplyScalarFieldEnum!], orderBy: [ReplyOrderByWithRelationInput!], skip: Int, take: Int, where: ReplyWhereInput): [Reply!]!
  topic: String!
}

type RoomAvgAggregate {
  id: Float
}

input RoomAvgOrderByAggregateInput {
  id: SortOrder
}

type RoomCount {
  chat: Int!
  reply: Int!
}

type RoomCountAggregate {
  _all: Int!
  created_at: Int!
  id: Int!
  topic: Int!
}

input RoomCountOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  topic: SortOrder
}

input RoomCreateInput {
  chat: ChatCreateNestedManyWithoutRoomInput
  created_at: DateTime!
  reply: ReplyCreateNestedManyWithoutRoomInput
  topic: String!
}

input RoomCreateNestedOneWithoutChatInput {
  connect: RoomWhereUniqueInput
  connectOrCreate: RoomCreateOrConnectWithoutChatInput
  create: RoomCreateWithoutChatInput
}

input RoomCreateNestedOneWithoutReplyInput {
  connect: RoomWhereUniqueInput
  connectOrCreate: RoomCreateOrConnectWithoutReplyInput
  create: RoomCreateWithoutReplyInput
}

input RoomCreateOrConnectWithoutChatInput {
  create: RoomCreateWithoutChatInput!
  where: RoomWhereUniqueInput!
}

input RoomCreateOrConnectWithoutReplyInput {
  create: RoomCreateWithoutReplyInput!
  where: RoomWhereUniqueInput!
}

input RoomCreateWithoutChatInput {
  created_at: DateTime!
  reply: ReplyCreateNestedManyWithoutRoomInput
  topic: String!
}

input RoomCreateWithoutReplyInput {
  chat: ChatCreateNestedManyWithoutRoomInput
  created_at: DateTime!
  topic: String!
}

type RoomGroupBy {
  _avg: RoomAvgAggregate
  _count: RoomCountAggregate
  _max: RoomMaxAggregate
  _min: RoomMinAggregate
  _sum: RoomSumAggregate
  created_at: DateTime!
  id: Int!
  topic: String!
}

type RoomMaxAggregate {
  created_at: DateTime
  id: Int
  topic: String
}

input RoomMaxOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  topic: SortOrder
}

type RoomMinAggregate {
  created_at: DateTime
  id: Int
  topic: String
}

input RoomMinOrderByAggregateInput {
  created_at: SortOrder
  id: SortOrder
  topic: SortOrder
}

input RoomOrderByWithAggregationInput {
  _avg: RoomAvgOrderByAggregateInput
  _count: RoomCountOrderByAggregateInput
  _max: RoomMaxOrderByAggregateInput
  _min: RoomMinOrderByAggregateInput
  _sum: RoomSumOrderByAggregateInput
  created_at: SortOrder
  id: SortOrder
  topic: SortOrder
}

input RoomOrderByWithRelationInput {
  chat: ChatOrderByRelationAggregateInput
  created_at: SortOrder
  id: SortOrder
  reply: ReplyOrderByRelationAggregateInput
  topic: SortOrder
}

input RoomRelationFilter {
  is: RoomWhereInput
  isNot: RoomWhereInput
}

enum RoomScalarFieldEnum {
  created_at
  id
  topic
}

input RoomScalarWhereWithAggregatesInput {
  AND: [RoomScalarWhereWithAggregatesInput!]
  NOT: [RoomScalarWhereWithAggregatesInput!]
  OR: [RoomScalarWhereWithAggregatesInput!]
  created_at: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  topic: StringWithAggregatesFilter
}

type RoomSumAggregate {
  id: Int
}

input RoomSumOrderByAggregateInput {
  id: SortOrder
}

input RoomUpdateInput {
  chat: ChatUpdateManyWithoutRoomInput
  created_at: DateTimeFieldUpdateOperationsInput
  reply: ReplyUpdateManyWithoutRoomInput
  topic: StringFieldUpdateOperationsInput
}

input RoomUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  topic: StringFieldUpdateOperationsInput
}

input RoomUpdateOneWithoutChatInput {
  connect: RoomWhereUniqueInput
  connectOrCreate: RoomCreateOrConnectWithoutChatInput
  create: RoomCreateWithoutChatInput
  delete: Boolean
  disconnect: Boolean
  update: RoomUpdateWithoutChatInput
  upsert: RoomUpsertWithoutChatInput
}

input RoomUpdateOneWithoutReplyInput {
  connect: RoomWhereUniqueInput
  connectOrCreate: RoomCreateOrConnectWithoutReplyInput
  create: RoomCreateWithoutReplyInput
  delete: Boolean
  disconnect: Boolean
  update: RoomUpdateWithoutReplyInput
  upsert: RoomUpsertWithoutReplyInput
}

input RoomUpdateWithoutChatInput {
  created_at: DateTimeFieldUpdateOperationsInput
  reply: ReplyUpdateManyWithoutRoomInput
  topic: StringFieldUpdateOperationsInput
}

input RoomUpdateWithoutReplyInput {
  chat: ChatUpdateManyWithoutRoomInput
  created_at: DateTimeFieldUpdateOperationsInput
  topic: StringFieldUpdateOperationsInput
}

input RoomUpsertWithoutChatInput {
  create: RoomCreateWithoutChatInput!
  update: RoomUpdateWithoutChatInput!
}

input RoomUpsertWithoutReplyInput {
  create: RoomCreateWithoutReplyInput!
  update: RoomUpdateWithoutReplyInput!
}

input RoomWhereInput {
  AND: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  chat: ChatListRelationFilter
  created_at: DateTimeFilter
  id: IntFilter
  reply: ReplyListRelationFilter
  topic: StringFilter
}

input RoomWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Visitor {
  Chat(cursor: ChatWhereUniqueInput, distinct: [ChatScalarFieldEnum!], orderBy: [ChatOrderByWithRelationInput!], skip: Int, take: Int, where: ChatWhereInput): [Chat!]!
  _count: VisitorCount
  email: String!
  id: String!
  name: String!
}

type VisitorCount {
  Chat: Int!
}

type VisitorCountAggregate {
  _all: Int!
  email: Int!
  id: Int!
  name: Int!
}

input VisitorCountOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input VisitorCreateInput {
  Chat: ChatCreateNestedManyWithoutSenderInput
  email: String!
  id: String
  name: String!
}

input VisitorCreateNestedOneWithoutChatInput {
  connect: VisitorWhereUniqueInput
  connectOrCreate: VisitorCreateOrConnectWithoutChatInput
  create: VisitorCreateWithoutChatInput
}

input VisitorCreateOrConnectWithoutChatInput {
  create: VisitorCreateWithoutChatInput!
  where: VisitorWhereUniqueInput!
}

input VisitorCreateWithoutChatInput {
  email: String!
  id: String
  name: String!
}

type VisitorGroupBy {
  _count: VisitorCountAggregate
  _max: VisitorMaxAggregate
  _min: VisitorMinAggregate
  email: String!
  id: String!
  name: String!
}

type VisitorMaxAggregate {
  email: String
  id: String
  name: String
}

input VisitorMaxOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

type VisitorMinAggregate {
  email: String
  id: String
  name: String
}

input VisitorMinOrderByAggregateInput {
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input VisitorOrderByWithAggregationInput {
  _count: VisitorCountOrderByAggregateInput
  _max: VisitorMaxOrderByAggregateInput
  _min: VisitorMinOrderByAggregateInput
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input VisitorOrderByWithRelationInput {
  Chat: ChatOrderByRelationAggregateInput
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input VisitorRelationFilter {
  is: VisitorWhereInput
  isNot: VisitorWhereInput
}

enum VisitorScalarFieldEnum {
  email
  id
  name
}

input VisitorScalarWhereWithAggregatesInput {
  AND: [VisitorScalarWhereWithAggregatesInput!]
  NOT: [VisitorScalarWhereWithAggregatesInput!]
  OR: [VisitorScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input VisitorUpdateInput {
  Chat: ChatUpdateManyWithoutSenderInput
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input VisitorUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input VisitorUpdateOneRequiredWithoutChatInput {
  connect: VisitorWhereUniqueInput
  connectOrCreate: VisitorCreateOrConnectWithoutChatInput
  create: VisitorCreateWithoutChatInput
  update: VisitorUpdateWithoutChatInput
  upsert: VisitorUpsertWithoutChatInput
}

input VisitorUpdateWithoutChatInput {
  email: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input VisitorUpsertWithoutChatInput {
  create: VisitorCreateWithoutChatInput!
  update: VisitorUpdateWithoutChatInput!
}

input VisitorWhereInput {
  AND: [VisitorWhereInput!]
  Chat: ChatListRelationFilter
  NOT: [VisitorWhereInput!]
  OR: [VisitorWhereInput!]
  email: StringFilter
  id: StringFilter
  name: StringFilter
}

input VisitorWhereUniqueInput {
  id: String
}
